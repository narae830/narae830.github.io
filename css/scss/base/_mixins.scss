// media query
$desktop: 1920px;
$laptop: 1440px;
$tablet: 960px;
$mobile: 767px;

@mixin desktop {
    @media screen and (min-width:#{$tablet + 1}) {
        @content;
    }
}
@mixin laptop{ 
    @media screen and (max-width:#{$laptop}){ 
        @content; 
    } 
}
@mixin tablet{ 
    @media screen and (max-width:#{$tablet}){ 
        @content; 
    } 
}
@mixin mobile{ 
    @media screen and (max-width:#{$mobile}){ 
        @content; 
    }
}

// vw-convert
@function deUnit($value) {
    @return ($value / ($value * 0 + 1));
}
@mixin vw-convert-laptop($property, $pixel){
    @if length($pixel) == 1 {
              #{$property}: deUnit($pixel) * 100 / deUnit($laptop) * 1vw;
    } @else if length($pixel) == 2 {
              #{$property}: deUnit(nth($pixel,1)) * 100 / deUnit($laptop) * 1vw
              deUnit(nth($pixel,2)) * 100 / deUnit($laptop) * 1vw;
    } @else if length($pixel) == 3 {
              #{$property}: deUnit(nth($pixel,1)) * 100 / deUnit($laptop) * 1vw
              deUnit(nth($pixel,2)) * 100 / deUnit($laptop) * 1vw
              deUnit(nth($pixel,3)) * 100 / deUnit($laptop) * 1vw;
    } @else if length($pixel) == 4 {
              #{$property}: deUnit(nth($pixel,1)) * 100 / deUnit($laptop) * 1vw
              deUnit(nth($pixel,2)) * 100 / deUnit($laptop) * 1vw
              deUnit(nth($pixel,3))* 100 / deUnit($laptop) * 1vw
              deUnit(nth($pixel,4)) * 100 / deUnit($laptop) * 1vw;
    }
}
@mixin vw-convert-tablet($property, $pixel){
  @if length($pixel) == 1 {
            #{$property}: deUnit($pixel) * 100 / deUnit($tablet) * 1vw;
  } @else if length($pixel) == 2 {
            #{$property}: deUnit(nth($pixel,1)) * 100 / deUnit($tablet) * 1vw
            deUnit(nth($pixel,2)) * 100 / deUnit($tablet) * 1vw;
  } @else if length($pixel) == 3 {
            #{$property}: deUnit(nth($pixel,1)) * 100 / deUnit($tablet) * 1vw
            deUnit(nth($pixel,2)) * 100 / deUnit($tablet) * 1vw
            deUnit(nth($pixel,3)) * 100 / deUnit($tablet) * 1vw;
  } @else if length($pixel) == 4 {
            #{$property}: deUnit(nth($pixel,1)) * 100 / deUnit($tablet) * 1vw
            deUnit(nth($pixel,2)) * 100 / deUnit($tablet) * 1vw
            deUnit(nth($pixel,3))* 100 / deUnit($tablet) * 1vw
            deUnit(nth($pixel,4)) * 100 / deUnit($tablet) * 1vw;
  }
}
@mixin vw-convert-mobile($property, $pixel){
  @if length($pixel) == 1 {
            #{$property}: deUnit($pixel) * 100 / deUnit($mobile) * 1vw;
  } @else if length($pixel) == 2 {
            #{$property}: deUnit(nth($pixel,1)) * 100 / deUnit($mobile) * 1vw
            deUnit(nth($pixel,2)) * 100 / deUnit($mobile) * 1vw;
  } @else if length($pixel) == 3 {
            #{$property}: deUnit(nth($pixel,1)) * 100 / deUnit($mobile) * 1vw
            deUnit(nth($pixel,2)) * 100 / deUnit($mobile) * 1vw
            deUnit(nth($pixel,3)) * 100 / deUnit($mobile) * 1vw;
  } @else if length($pixel) == 4 {
            #{$property}: deUnit(nth($pixel,1)) * 100 / deUnit($mobile) * 1vw
            deUnit(nth($pixel,2)) * 100 / deUnit($mobile) * 1vw
            deUnit(nth($pixel,3))* 100 / deUnit($mobile) * 1vw
            deUnit(nth($pixel,4)) * 100 / deUnit($mobile) * 1vw;
  }
}
  
// 글자 숨기기
@mixin text-hidden {
  text-indent: -9999em;
  overflow: hidden;
}

@mixin list-bullet($color: #111) {
  position: relative;
  padding-left: 15px;
  margin-top: 5px;
  &:before {
    content: '';
    position: absolute;
    display: block;
    top: 10px;
    left: 0;
    width: 4px;
    height: 4px;
    border-radius: 50%;
    margin-right: 6px;
    transform: translateY(-50%);
    background-color: $color;
  }
}

// 말줄임
@mixin ellipsis($line, $line-height : $line-height) {
    @if ($line == 1) { 
        overflow: hidden; 
        text-overflow: ellipsis; 
        white-space: nowrap; 
    } @else { 
        display: -webkit-box;
        max-height:$line-height * $line + em; //ie 크로스브라우징
        overflow: hidden; 
        text-overflow: ellipsis; 
        -webkit-box-orient: vertical; 
        -webkit-line-clamp: $line; 
        word-break: normal;
    } 
}
 
// svg icons
@function icon($icon-name,
  $color,
  $color2: ""
  ) {
  $icons: ( //SVG 아이콘 목록
    // 이메일
    email: "%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M22.5 3.25c.483 0 .875.392.875.875v15.75a.875.875 0 0 1-.875.875h-21a.875.875 0 0 1-.875-.875V4.125c0-.483.392-.875.875-.875h21zm-.375 1.25H1.875v15h20.25v-15zm.237-1.032.776.814-10.572 10.08a.825.825 0 0 1-1.096.031l-.038-.033L.862 4.282l.776-.814L12 13.347l10.362-9.88z'/%3E%3C/svg%3E",
    // 링크 화살표
    link-arrow : "%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16.338 8.055'%3E%3Cg transform='translate(0 0.354)'%3E%3Cpath d='M-31.131-91.876l3.674-3.674-3.674-3.674' transform='translate(43.088 99.224)' fill='none' stroke='%23#{$color}' stroke-miterlimit='10' stroke-width='1'/%3E%3Cline x1='15.72' transform='translate(0 3.674)' fill='none' stroke='%23#{$color}' stroke-miterlimit='10' stroke-width='1'/%3E%3C/g%3E%3C/svg%3E",
    // 링크 새창
    link-window : "%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 10 10' preserveAspectRatio='XMinYMin meet'%3E%3Cg%3E%3Cpolygon fill='%23#{$color}' points='5.944,0 5.944,1.283 8.021,1.283 2.972,6.243 3.734,7.063 8.718,2.079 8.718,4.155 10,4.155 10,0 '/%3E%3Cpolygon fill='%23#{$color}' points='0,0 0,10 10,10 10,5.449 8.718,5.449 8.718,8.72 1.283,8.72 1.283,1.283 4.553,1.283 4.553,0 '/%3E%3C/g%3E%3C/svg%3E"
  );
  $icon: map-get($icons, $icon-name);
  @return url("data:image/svg+xml,#{$icon}");
}

// appearance
@mixin appearance($values) {
  -webkit-appearance:$values;
  -moz-appearance:$values;
  appearance:$values;
}

// 웹키트 탭 하이라이트 컬러
@mixin tap-highlight {
    -webkit-tap-highlight-color: rgba(238, 186, 186, 0.2);
  }

// 백그라운드 이미지 삽입
@mixin bgi($imageName, $type: "png") {
  background-image: url(#{$path-image}#{$imageName}.#{$type});
  background-repeat: no-repeat;
}

// 그라디언트 생성
@mixin horizontal-gradient($from, $to, $stop: 100%) {
  // fallback/image non-cover color
  background-color: $from;
  // Firefox 3.6+
  background-image: -moz-linear-gradient(left, $from 0%, $to $stop);
  // Safari 4+, Chrome 1+
  background-image: -webkit-gradient(linear,
      left top,
      right top,
      color-stop(0%, $from),
      color-stop($stop, $to));
  // Safari 5.1+, Chrome 10+
  background-image: -webkit-linear-gradient(left, $from 0%, $to $stop);
  // Opera 11.10+
  background-image: -o-linear-gradient(left, $from 0%, $to $stop);
  // IE10+
  background: -ms-linear-gradient(left, $from 0%, $to $stop);
  // Standard
  background: linear-gradient(to right, $from 0%, $to $stop);
  // IE6-9
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$from', endColorstr='$to', GradientType=1);
}

// keyframes
@mixin keyframes($animation-name: animaton) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }

  @-moz-keyframes #{$animation-name} {
    @content;
  }

  @keyframes #{$animation-name} {
    @content;
  }
}

// animation
@mixin animation($duration, $animation, $delay: 0) {
  -webkit-animation-delay: $delay;
  -webkit-animation-duration: $duration;
  -webkit-animation-name: $animation;
  -webkit-animation-fill-mode: forwards;
  /* this prevents the animation from restarting! */

  -moz-animation-delay: $delay;
  -moz-animation-duration: $duration;
  -moz-animation-name: $animation;
  -moz-animation-fill-mode: forwards;
  /* this prevents the animation from restarting! */

  -o-animation-delay: $delay;
  -o-animation-duration: $duration;
  -o-animation-name: $animation;
  -o-animation-fill-mode: forwards;
  /* this prevents the animation from restarting! */

  animation-delay: $delay;
  animation-duration: $duration;
  animation-name: $animation;
  animation-fill-mode: forwards;
  /* this prevents the animation from restarting! */
}

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
  -moz-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
  -moz-flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
  -moz-flex-flow: $flow;
  -ms-flex-flow: $flow;
  flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
  -moz-flex-grow: $grow;
  -ms-flex-grow: $grow;
  -ms-flex-positive: $grow;
  flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
  -moz-flex-shrink: $shrink;
  -ms-flex-shrink: $shrink;
  -ms-flex-negative: $shrink;
  flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
  -moz-flex-basis: $width;
  -ms-flex-basis: $width;
  flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
  -moz-justify-content: $justify;
  -ms-justify-content: $justify;
  justify-content: $justify;
  -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
  -webkit-align-content: $align;
  -moz-align-content: $align;
  -ms-align-content: $align;
  align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
  -webkit-align-items: $align;
  -moz-align-items: $align;
  -ms-align-items: $align;
  align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
  -webkit-align-self: $align;
  -moz-align-self: $align;
  -ms-align-self: $align;
  align-self: $align;
}

// pointer-events:auto 처리
@mixin pointer-auto {
  -moz-pointer-events: auto;
  -webkit-pointer-events: auto;
  -o-pointer-events: auto;
  -ms-pointer-events: auto;
  pointer-events: auto;
}

// pointer-events:none 처리
@mixin pointer-none {
  -moz-pointer-events: none;
  -webkit-pointer-events: none;
  -o-pointer-events: none;
  -ms-pointer-events: none;
  pointer-events: none;
}

@mixin select-none {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

// backface-visibility:hidden 처리
@mixin backface-hide {
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  backface-visibility: hidden;
}

// placeholder
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

// Browser Prefixes
@mixin transform($transforms) {
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  transform: $transforms;
}

// Rotate
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

// Scale
@mixin scale($scale) {
  @include transform(scale($scale));
}

// Translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

// Skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

// Transform Origin
@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin;
  transform-origin: $origin;
}

// 컨텐츠 중앙 정렬
@mixin center() {
  @include flexbox;
  @include justify-content(center);
  @include align-items(center);
}